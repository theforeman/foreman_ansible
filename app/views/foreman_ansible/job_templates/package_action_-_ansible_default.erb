<%#
name: Package Action - Ansible Default
job_category: Ansible Packages
description_format: 'Package %{name}: %{state}'
snippet: false
template_inputs:
- name: state
  required: true
  input_type: user
  description: Whether to install (present, latest), or remove (absent) a package.
  options: "present\r\nabsent\r\nlatest"
  advanced: false
- name: name
  required: true
  input_type: user
  description: "Package name, or package specifier with version, like name-1.0.\r\nBe
    aware that packages are not always named the same and this module will not 'translate'
    them per distro."
  advanced: false
- name: pre_script
  description: A script to run prior to the package action
  input_type: user
  required: false
  advanced: true
- name: post_script
  description: A script to run after the package action
  input_type: user
  required: false
  advanced: true
provider_type: Ansible
kind: job_template
model: JobTemplate
-%>
# For Windows targets use the win_package module instead.
---
- hosts: all
  <%- if input('pre_script').present? -%>
  pre_tasks:
    - shell: "<%= input('pre_script') %>"
  <%- end -%>
  tasks:
    - name: Collect bootc status
      shell:
        cmd: 'bootc status --json'
      register: bootc_status
      ignore_errors: true
    - name: Parse bootc status json
      set_fact:
        bootc_status_json: "{{ bootc_status.stdout | from_json }}"
      when: bootc_status.rc == 0
    - name: Enable bootc overlay
      shell:
        cmd: 'bootc usr-overlay'
      register: out
      ignore_errors: true
      when: bootc_status_json is defined and bootc_status_json['status']['booted'] != 'null'
    - debug: var=out
    - name: Install packages via dnf for image mode machines
      package:
        use: 'dnf'
<%= indent(8) { to_yaml({"name" => input('name')}).gsub(/---\n/, '') } -%>
        state: <%= input('state') %>
      when: bootc_status_json is defined and bootc_status_json['status']['booted'] != 'null'
    - name: Install packages normally
      package:
<%= indent(8) { to_yaml({"name" => input('name')}).gsub(/---\n/, '') } -%>
        state: <%= input('state') %>
      when: bootc_status_json is not defined or bootc_status_json['status']['booted'] == 'null'
<%- if input('post_script').present? -%>
  post_tasks:
    - shell: "<%= input('post_script') %>"
<%- end -%>
